const GITHUB_USERNAME = "ubndtthm";  // Thay b·∫±ng GitHub username c·ªßa b·∫°n
const REPO_NAME = "thitranhocmon.github.io";  // Thay b·∫±ng repository c·ªßa b·∫°n
const FILE_PATH = "news.json";  // File l∆∞u tin t·ª©c
const API_URL = `https://api.github.com/repos/${GITHUB_USERNAME}/${REPO_NAME}/contents/${FILE_PATH}`;
const TOKEN = "GITHUB_PERSONAL_ACCESS_TOKEN"; // B·∫°n ph·∫£i t·ª± t·∫°o token GitHub

// üìù L∆∞u tin t·ª©c m·ªõi
async function saveNews() {
    let title = document.getElementById("title").value;
    let summary = document.getElementById("summary").value;
    let image = document.getElementById("image").value;
    let date = new Date().toISOString().split("T")[0];

    if (!title || !summary) {
        alert("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ v√† t√≥m t·∫Øt!");
        return;
    }

    let newNews = { title, summary, image, date };

    // 1Ô∏è‚É£ L·∫•y d·ªØ li·ªáu c≈© t·ª´ news.json
    let response = await fetch(`https://raw.githubusercontent.com/${GITHUB_USERNAME}/${REPO_NAME}/main/${FILE_PATH}`);
    let data = await response.json();
    
    // 2Ô∏è‚É£ Th√™m tin m·ªõi v√†o m·∫£ng
    data.unshift(newNews);

    // 3Ô∏è‚É£ G·ª≠i d·ªØ li·ªáu m·ªõi l√™n GitHub
    let fileSHA = await getFileSHA();
    let content = btoa(JSON.stringify(data, null, 2)); // M√£ h√≥a th√†nh base64

    let updateResponse = await fetch(API_URL, {
        method: "PUT",
        headers: {
            "Authorization": `token ${TOKEN}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            message: "C·∫≠p nh·∫≠t tin t·ª©c",
            content: content,
            sha: fileSHA
        })
    });

    if (updateResponse.ok) {
        alert("üìù L∆∞u tin t·ª©c th√†nh c√¥ng!");
        loadNews();  // T·∫£i l·∫°i danh s√°ch tin
    } else {
        alert("‚ùå L∆∞u th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i GitHub Token.");
    }
}

// üîç L·∫•y SHA c·ªßa file `news.json` tr√™n GitHub
async function getFileSHA() {
    let response = await fetch(API_URL, {
        headers: { "Authorization": `token ${TOKEN}` }
    });
    let data = await response.json();
    return data.sha;
}

// üì• T·∫£i danh s√°ch tin t·ª©c l√™n trang Admin
async function loadNews() {
    let response = await fetch(`https://raw.githubusercontent.com/${GITHUB_USERNAME}/${REPO_NAME}/main/${FILE_PATH}`);
    let newsList = await response.json();
    let newsListDiv = document.getElementById("news-list");
    newsListDiv.innerHTML = "";

    newsList.forEach((news, index) => {
        let newsItem = document.createElement("div");
        newsItem.classList.add("news-item");
        newsItem.innerHTML = `
            <h2>${news.title}</h2>
            <p>${news.summary}</p>
            ${news.image ? `<img src="${news.image}" alt="H√¨nh ·∫£nh" style="max-width:100%;">` : ""}
            <p class="date">Ng√†y ƒëƒÉng: ${news.date}</p>
            <button onclick="deleteNews(${index})">üóë X√≥a</button>
        `;
        newsListDiv.appendChild(newsItem);
    });
}

// ‚ùå X√≥a tin t·ª©c
async function deleteNews(index) {
    let response = await fetch(`https://raw.githubusercontent.com/${GITHUB_USERNAME}/${REPO_NAME}/main/${FILE_PATH}`);
    let data = await response.json();

    data.splice(index, 1);  // X√≥a tin theo index

    let fileSHA = await getFileSHA();
    let content = btoa(JSON.stringify(data, null, 2));

    let updateResponse = await fetch(API_URL, {
        method: "PUT",
        headers: {
            "Authorization": `token ${TOKEN}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            message: "X√≥a tin t·ª©c",
            content: content,
            sha: fileSHA
        })
    });

    if (updateResponse.ok) {
        alert("üóë X√≥a tin t·ª©c th√†nh c√¥ng!");
        loadNews();  // C·∫≠p nh·∫≠t l·∫°i danh s√°ch tin
    } else {
        alert("‚ùå X√≥a th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i GitHub Token.");
    }
}

// T·∫£i tin t·ª©c khi trang Admin m·ªü
document.addEventListener("DOMContentLoaded", loadNews);
